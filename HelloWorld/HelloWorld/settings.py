"""
Django settings for HelloWorld project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*4kgzx%k$e(*&xquv5n7%u_ar3w3v*=)lo^idmo&=bkib23ccs'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG_FLAG', "false").lower() == "true"

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'Models',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'HelloWorld.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR+"/templates", ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'HelloWorld.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# HTTPS security
# SECURE_SSL_REDIRECT = False  # 将所有非SSL请求永久重定向到SSL
# SECURE_HSTS_SECONDS = 2
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # 使用[HTTP严格传输安全]
# SECURE_FRAME_DENY = True               # 避免让自己的网页的框架和保护他们免受[点击劫持]
# SECURE_CONTENT_TYPE_NOSNIFF = True     # 防止浏览器猜测资产的内容类型
# SECURE_BROWSER_XSS_FILTER = True       # 启用浏览器的XSS过滤保护
# SESSION_COOKIE_SECURE = True
# SESSION_COOKIE_HTTPONLY = True         # 防止COOKIE窃听，使客户端到服务端总是COOKIE加密传输

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

# The STATICFILES_DIRS setting should not contain the STATIC_ROOT setting
STATIC_ROOT = os.path.join(BASE_DIR, 'html_root')
STATIC_VUE = os.path.join(BASE_DIR, 'vue_dist')
STATICFILES_DIRS = [
    STATIC_VUE,
]

if DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '%(asctime)s %(levelname)s %(message)s %(funcName)s %(filename)s:%(lineno)d pid=%(process)d tid=%(thread)d'
            },
            'simple': {
                'format': '%(asctime)s %(levelname)s %(message)s'
            },
            'standard': {
                'format': '%(asctime)s %(levelname)s %(message)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s.%(funcName)s]'
            },
        },
        'filters': {
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            },
        },
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
            },
            'tempFile': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'mode': 'w',
                'filename': './logs/TempFile.log',
                'formatter': 'standard',
            },
            'rollingFile': {
                'level': 'DEBUG',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': './logs/RollingFile.log',
                'maxBytes': 1024 * 1024 * 10,
                'backupCount': 5,
                'formatter': 'standard',
            },
            'mail_admins': {
                'level': 'ERROR',
                'class': 'django.utils.log.AdminEmailHandler',
                'include_html': True,
            },
        },
        'loggers': {
            'django': {
                'handlers': ['tempFile', 'rollingFile', 'console', 'mail_admins'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'django.request': {
                'handlers': ['mail_admins'],
                'level': 'ERROR',
                'propagate': False,
            },
        },
    }
else:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '%(asctime)s %(levelname)s %(message)s %(funcName)s %(filename)s:%(lineno)d pid=%(process)d tid=%(thread)d'
            },
            'simple': {
                'format': '%(asctime)s %(levelname)s %(message)s'
            },
            'standard': {
                'format': '%(asctime)s %(levelname)s %(message)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s.%(funcName)s]'
            },
        },
        'filters': {
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            },
        },
        'handlers': {
            'rollingFile': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': './logs/RollingFile.log',
                'maxBytes': 1024 * 1024 * 10,
                'backupCount': 5,
                'formatter': 'standard',
            },
            'mail_admins': {
                'level': 'ERROR',
                'class': 'django.utils.log.AdminEmailHandler',
                'include_html': True,
            },
        },
        'loggers': {
            'django': {
                'handlers': ['rollingFile', 'mail_admins'],
                'level': 'INFO',
                'propagate': True,
            },
            'django.request': {
                'handlers': ['rollingFile', 'mail_admins'],
                'level': 'ERROR',
                'propagate': True,
            },
        },
    }
